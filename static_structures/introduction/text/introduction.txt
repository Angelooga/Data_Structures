# Estructuras De Datos Estáticas

### ¿Qué es una estructura de datos estática?
Una estructura de datos estática tiene un tamaño fijo. Aunque se puede modificar el contenido, no es posible cambiar el espacio de memoria asignado a esta durante la ejecución del programa.

### Características:
Las estructuras de datos estáticas, como los arreglos, tienen un tamaño definido en tiempo de compilación, lo que significa que su memoria no puede ajustarse durante la ejecución. Su acceso a elementos es rápido y eficiente gracias a que se utiliza un índice para localizar directamente su dirección en memoria.

static_ds.jpg

### Diferencias entre estructuras dinámicas y estáticas

<table border="1">
    <thead>
        <tr>
            <th>Característica</th>
            <th>Estructuras de memoria estática</th>
            <th>Estructuras de memoria dinámica</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Asignación de memoria</td>
            <td>Memoria asignada en tiempo de compilación</td>
            <td>Memoria asignada en tiempo de ejecución</td>
        </tr>
        <tr>
            <td>Tamaño</td>
            <td>El tamaño es fijo y no se puede modificar</td>
            <td>El tamaño puede modificarse durante la ejecución</td>
        </tr>
        <tr>
            <td>Uso de memoria</td>
            <td>La utilización de memoria puede ser ineficiente</td>
            <td>La utilización de memoria es eficiente, ya que puede reutilizarse</td>
        </tr>
        <tr>
            <td>Acceso</td>
            <td>El tiempo de acceso es más rápido, ya que es fijo</td>
            <td>El tiempo de acceso puede ser más lento debido al uso de índices y punteros</td>
        </tr>
        <tr>
            <td>Ejemplos</td>
            <td>Arreglos, Pilas, Colas, Árboles (de tamaño fijo)</td>
            <td>Listas enlazadas, Árboles dinámicos, Conjuntos dinámicos</td>
        </tr>
    </tbody>
</table>

### Ventajas de las estructuras de datos estáticas:
##### Acceso rápido a los datos:
Dado que la memoria se asigna en tiempo de compilación y el tamaño es fijo, acceder a los elementos es un proceso rápido mediante operaciones de indexación.

##### Uso predecible de memoria:
Al ser el tamaño definido en tiempo de compilación, es posible calcular con precisión cuánta memoria utilizará el programa, algo clave en entornos con restricciones de memoria.

##### Fácil implementación y optimización:
Las estructuras estáticas son más sencillas de implementar y optimizar debido a su tamaño fijo. Esto permite diseñar algoritmos específicos para la estructura, reduciendo fallos en la caché y mejorando el rendimiento general del programa.

##### Gestión eficiente de memoria:
Como el tamaño se define previamente, la memoria se asigna y libera de forma eficiente, evitando la necesidad de realocar memoria o realizar copias frecuentes.

##### Código más sencillo:
Al no requerir asignación dinámica de memoria ni comprobaciones adicionales de errores, el código se vuelve más simple y fácil de mantener.

##### Menor sobrecarga:
Las estructuras estáticas generan menos sobrecarga que las dinámicas, ya que no necesitan realizar un seguimiento constante de la asignación y liberación de memoria.

https://www.geeksforgeeks.org/static-data-structure-vs-dynamic-data-structure/