# Algoritmos de B√∫squeda

### ¬øQu√© son los Algoritmos de B√∫squeda?

Son un conjunto de t√©cnicas fundamentales en inform√°tica, cuyo objetivo principal es localizar elementos espec√≠ficos dentro de estructuras de datos. Estas estructuras pueden incluir arreglos, listas, √°rboles, grafos, tablas hash, bases de datos y m√°s. La importancia de estos algoritmos radica en que muchas aplicaciones modernas, desde los motores de b√∫squeda en internet hasta los sistemas de inteligencia artificial, dependen de la capacidad de buscar y recuperar informaci√≥n de manera eficiente

Podemos ver un ejemplo para entender mejor:

busqueda_binaria.png

En este caso podemos entonces repetir el proceso con la mitad superior. Comenzar en el √≠tem central y compararlo con el valor que estamos buscando. Una vez m√°s, o lo encontramos o dividimos la lista por la mitad, eliminando por tanto otra gran parte de nuestro espacio de b√∫squeda posible. 

### Clasificaci√≥n de algoritmos de b√∫squeda:
Existen numerosos tipos de algoritmos de b√∫squeda, que se agrupan seg√∫n la estrategia utilizada o la estructura de datos involucrada. Por ejemplo:

B√∫squedas lineales (secuencial), que recorren los datos uno por uno, ideales para conjuntos peque√±os o no ordenados.
B√∫squedas binarias, que aprovechan estructuras ordenadas para dividir el espacio de b√∫squeda, logrando una gran eficiencia en datos grandes.
B√∫squedas en grafos, como el BFS (Breadth-First Search) y el DFS (Depth-First Search), que exploran redes complejas de nodos, como redes sociales o sistemas de rutas.
B√∫squedas hash, que utilizan funciones matem√°ticas para localizar elementos en tiempo promedio constante.

### Complejidad de los algoritmos de Busqueda

La complejidad de los algoritmos de b√∫squeda es una medida fundamental que describe cu√°nto tiempo (complejidad temporal) o cu√°nta memoria (complejidad espacial) requiere un algoritmo para completar su tarea en funci√≥n del tama√±o del conjunto de datos. Es crucial para evaluar su eficiencia y determinar qu√© algoritmo es m√°s adecuado para un problema dado.

Poddemos verlo de mejor manera en la siguiente tabla:

complejidad_busqueda_binaria.png

En resumen, podemos decir que la complejidad de los algoritmos de b√∫squeda var√≠a ampliamente seg√∫n la estructura de datos y el enfoque empleado.

###Ejemplos

##### Busqueda Lineal (Secuencial)

La b√∫squeda lineal es el algoritmo m√°s simple para encontrar un elemento en una lista o arreglo. Consiste en recorrer secuencialmente cada elemento de la estructura de datos y comparar uno por uno con el valor buscado hasta encontrarlo o llegar al final.

Ventajas:

F√°cil de implementar.
Funciona con datos no ordenados.

Desventajas:
Ineficiente para conjuntos de datos grandes O(n) en el peor caso).

busqueda_secuencial.png

##### B√∫squeda Binaria

La b√∫squeda binaria es un algoritmo eficiente que se utiliza para encontrar un elemento en una lista ordenada. Divide el espacio de b√∫squeda en mitades sucesivas, descartando la mitad irrelevante en cada paso. Este enfoque aprovecha el orden de los datos para reducir el n√∫mero de comparaciones necesarias.

Ventajas:
Mucho m√°s r√°pida que la b√∫squeda lineal en listas grandes (ùëÇ(log‚Å°ùëõ)
O(logn) en el peor caso) Ideal para conjuntos de datos est√°ticos y ordenados.

Desventajas:
Requiere que los datos est√©n previamente ordenados.
No es eficiente para conjuntos de datos din√°micos que cambian frecuentemente.

busqueda_binaria.png

code_busqueda_binaria.txt

##### B√∫squeda BST

La b√∫squeda en un *√°rbol binario de b√∫squeda* (BST) aprovecha la estructura especial del √°rbol:
    Todos los nodos en el sub√°rbol izquierdo tienen valores menores que el nodo ra√≠z.
    Todos los nodos en el sub√°rbol derecho tienen valores mayores que el nodo ra√≠z.
Esta propiedad permite buscar de manera eficiente al comparar el valor buscado con el      nodo actual y desplazarse hacia el sub√°rbol izquierdo o derecho seg√∫n corresponda.

Ventajas:
Operaci√≥n eficiente en √°rboles balanceados (ùëÇ(logùëõ)Puede manejar grandes conjuntos de datos din√°micos.

Desventajas:
Si el √°rbol est√° desbalanceado, el rendimiento puede degradarse a O(n) en el peor caso.
La inserci√≥n/eliminaci√≥n pueden requerir operaciones adicionales para mantener el balance del √°rbol.

bst_1.png

bst_2.png

code_bst.txt

##### Busqueda Hash

La b√∫squeda hash es un m√©todo eficiente que utiliza una estructura de datos conocida como tabla hash para localizar un valor de manera r√°pida. Este enfoque convierte la clave de b√∫squeda en una posici√≥n dentro de la tabla mediante una funci√≥n hash. La b√∫squeda hash es ideal para grandes conjuntos de datos, donde se requiere acceso r√°pido.

Ventajas:
Tiempo de b√∫squeda promedio constante O(1)) en operaciones bien distribuidas.Eficiente para datos no ordenados y acceso directo.

Desventajas:
Requiere una buena funci√≥n hash para minimizar colisiones.
Las colisiones (cuando dos claves hash se asignan al mismo √≠ndice) pueden degradar el rendimiento.
La tabla hash consume m√°s memoria que otros m√©todos.

code_hash.txt